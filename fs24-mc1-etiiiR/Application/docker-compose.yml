version: '3'
services:
  surrealdb:
    image: surrealdb/surrealdb:latest
    container_name: surrealdb
    restart: always
    networks:
      surrealdb_network:
        aliases:
          - surrealdb
    command: start --user etiiir --pass Welcome12 file:/data/database.db
    ports:
      - 8000:8000
    volumes:
      - ./data:/data

  kafka1:
    image: confluentinc/cp-kafka
    container_name: kafka1
    hostname: kafka1
    networks:
      - kafka_network
    ports:
      - "19092:19092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://:19092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka1:9092,EXTERNAL://localhost:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      CLUSTER_ID: 'BDb4EWyiS1GjcEKCew2HvQ'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      restart: always

  kafka2:
    image: confluentinc/cp-kafka
    container_name: kafka2
    hostname: kafka2
    networks:
      - kafka_network
    ports:
      - "19093:19093"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://:19093'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka2:9092,EXTERNAL://localhost:19093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      CLUSTER_ID: 'BDb4EWyiS1GjcEKCew2HvQ'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      restart: always

  kafka3:
    image: confluentinc/cp-kafka
    container_name: kafka3
    hostname: kafka3
    networks:
      - kafka_network
    ports:
      - "19094:19094"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://:19094'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka3:9092,EXTERNAL://localhost:19094'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      CLUSTER_ID: 'BDb4EWyiS1GjcEKCew2HvQ'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      restart: always

  smartstation_producer:
    build:
      context: ./SmartStation
      dockerfile: Dockerfile.SmartStation_Producer
    container_name: smartstation_producer
    environment:
      - KAFKA_SERVER=kafka1:9092,kafka2:9092,kafka3:9092
      - TOPIC=bus_locations
    networks:
      - kafka_network
    depends_on:
      - surrealdb
      - kafka1
      - kafka2
      - kafka3
    restart: always

  smartstation_consumer:
    build:
      context: ./SmartStation
      dockerfile: Dockerfile.SmartStation_Consumer
    container_name: smartstation_consumer
    networks:
      - surrealdb_network
      - kafka_network
    depends_on:
      - smartstation_producer
    restart: always

  smartbus_producer:
    build:
      context: ./SmartBus
      dockerfile: Dockerfile.BusProducer
    container_name: smartbus_producer
    environment:
      - KAFKA_SERVER=kafka1:9092,kafka2:9092,kafka3:9092
      - TOPIC=bus_data
    networks:
      - kafka_network
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    restart: always

  smartbus_processor:
    build:
      context: ./SmartBus
      dockerfile: Dockerfile.BusProcessor
    container_name: smartbus_processor
    environment:
      - KAFKA_SERVER=kafka1:9092,kafka2:9092,kafka3:9092
      - TOPIC=bus_data
    networks:
      - kafka_network
    depends_on:
      - smartbus_producer
    restart: always

  airquality_producer:
    build:
      context: ./AirQuality
      dockerfile: Dockerfile.AirQuality_Producer
    container_name: air_quality_producer
    environment:
      - KAFKA_SERVER=kafka1:9092,kafka2:9092,kafka3:9092
      - TOPIC=air_quality_data
    networks:
      - kafka_network
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    restart: always

  airquality_processor:
    build:
      context: ./AirQuality
      dockerfile: Dockerfile.AirQuality_Processor
    container_name: air_quality_processor
    environment:
      - KAFKA_SERVER=kafka1:9092,kafka2:9092,kafka3:9092
      - TOPIC=air_quality_data
    networks:
      - kafka_network
    depends_on:
      - airquality_producer
    restart: always

  airquality_persister:
    build:
      context: ./AirQuality
      dockerfile: Dockerfile.AirQuality_Persister
    container_name: air_quality_persister
    volumes:
      - ./data:/app/data
    environment:
      - KAFKA_SERVER=kafka1:9092,kafka2:9092,kafka3:9092
      - TOPIC=air_quality_data
    networks:
      - kafka_network
    depends_on:
      - airquality_processor
    restart: always

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop1
    networks:
      - kafka_network
    ports:
      - "900:9000" # Corrected port mapping to match standard Kafdrop port
    environment:
      KAFKA_BROKERCONNECT: "kafka1:9092,kafka2:9092,kafka3:9092" # Adjusted for consistency
      KAFDROP_PROTOBUF_DESC_DIR: "/descriptors" # Environment variable pointing to the descriptor folder
      CMD_ARGS: "--message.format=PROTOBUF --protobufdesc.directory=./descriptors" # Adjusted for consistency
    volumes:
      - ./descriptors:/descriptors # Mounting the local descriptor folder to the container
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    restart: always


  fastapi-app:
    build:
      context: ./SmartBus
      dockerfile: Dockerfile.main
    container_name: smartbus_main
    networks:
      - kafka_network
      - default
    environment:
      - KAFKA_SERVER=kafka1:9092,kafka2:9092,kafka3:9092
      - TOPIC=bus_data
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092,kafka2:9092,kafka3:9092 # Adjust this to your Kafka setup
    ports:
      - "3333:3333"
    restart: always

networks:
  kafka_network:
    driver: bridge
  surrealdb_network:
    driver: bridge
